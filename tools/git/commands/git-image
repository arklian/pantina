#!/bin/bash
####################################################################################################
# Dependency Checks
####################################################################################################
# Function to check if doctl is installed
check_doctl() {
    if ! command -v doctl &> /dev/null; then
        echo "doctl is not installed. Please install it first."
        echo "To install doctl, follow these steps:"
        echo "1. For macOS: brew install doctl"
        echo "2. For Linux: sudo snap install doctl"
        echo "3. For Windows: Download and install from https://github.com/digitalocean/doctl/releases"
        exit 1
    fi
}

# Function to check if jq is installed
check_jq() {
    if ! command -v jq &> /dev/null; then
        echo "jq is not installed. Please install it first."
        echo "To install jq, follow these steps:"
        echo "1. For macOS: brew install jq"
        echo "2. For Linux: sudo apt-get install jq -y"
        echo "3. For Windows: Download and install from https://stedolan.github.io/jq/download/"
        exit 1
    fi
}

# Function to check if xmllint is installed
check_xmllint() {
    if ! command -v xmllint &> /dev/null; then
        echo "xmllint is not installed. Please install it first."
        echo "To install xmllint, run:"
        echo "sudo apt-get install libxml2-utils"
        echo "or"
        echo "brew install libxml2"
        exit 1
    fi
}

# Check if doctl, jq, and xmllint are installed
check_doctl
check_jq
check_xmllint
####################################################################################################
# Main Script Start
####################################################################################################
# Check if the correct number of arguments are provided
if [ "$#" -lt 1 ]; then
    echo "Usage: git image <image_path_or_directory>"
    exit 1
fi

# Check if environment variables are set
if [ -z "$DIGITAL_OCEAN_SPACES_ACCESS" ] || [ -z "$DIGITAL_OCEAN_SPACES_SECRET" ]; then
    echo "Environment variables DIGITAL_OCEAN_SPACES_ACCESS and DIGITAL_OCEAN_SPACES_SECRET must be set."
    exit 1
fi

PATH_TO_UPLOAD=$1
IMAGE_TS_PATH="$HOME/patina/js/src/patina/assets/images.ts"
SPACE_NAME="patina-dev"
SPACE_PATH="webimg/"
REGION="nyc3" # Replace with your region

# Check if the image.ts file exists
echo "Checking for image.ts at $IMAGE_TS_PATH"
if [ ! -f "$IMAGE_TS_PATH" ]; then
    echo "image.ts file not found at $IMAGE_TS_PATH. Please ensure the file exists and the path is correct."
    exit 1
fi

# Check if the path exists
if [ ! -e "$PATH_TO_UPLOAD" ]; then
    echo "Path not found: $PATH_TO_UPLOAD"
    exit 1
fi
####################################################################################################
# Upload to DO
####################################################################################################
upload_file() {
    local FILE_PATH=$1
    local FILE_NAME=$(basename "$FILE_PATH")

    # Check if the file name contains spaces
    if [[ "$FILE_NAME" == *" "* ]]; then
        echo "The file name '$FILE_NAME' contains spaces. Skipping this file."
        return
    fi

    # Calculate the date in the correct format
    DATE=$(date -R -u)

    # Create the string to sign
    STRING_TO_SIGN="PUT\n\napplication/octet-stream\n${DATE}\nx-amz-acl:public-read\n/${SPACE_NAME}/${SPACE_PATH}${FILE_NAME}"

    # Create the signature
    SIGNATURE=$(echo -en "${STRING_TO_SIGN}" | openssl sha1 -hmac "${DIGITAL_OCEAN_SPACES_SECRET}" -binary | base64)

    # Upload the file using curl
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PUT -T "$FILE_PATH" \
        -H "Date: ${DATE}" \
        -H "Authorization: AWS ${DIGITAL_OCEAN_SPACES_ACCESS}:${SIGNATURE}" \
        -H "Content-Type: application/octet-stream" \
        -H "x-amz-acl: public-read" \
        "https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}")

    if [ "$RESPONSE" -eq 200 ]; then
        echo "File '$FILE_NAME' uploaded successfully to https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}"
    else
        echo "Failed to upload file '$FILE_NAME'. Response code: $RESPONSE"
        # Print detailed error message
        curl -X PUT -T "$FILE_PATH" \
            -H "Date: ${DATE}" \
            -H "Authorization: AWS ${DIGITAL_OCEAN_SPACES_ACCESS}:${SIGNATURE}" \
            -H "Content-Type: application/octet-stream" \
            -H "x-amz-acl: public-read" \
            "https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${SPACE_PATH}${FILE_NAME}" -v
    fi
}
####################################################################################################
# Update Image.Ts
####################################################################################################
update_image_ts() {
    echo "Updating image.ts with new image URLs..."

    # Calculate the date in the correct format
    DATE=$(date -R -u)

    # Create the string to sign for listing files
    STRING_TO_SIGN="GET\n\n\n${DATE}\n/${SPACE_NAME}/"

    # Create the signature
    SIGNATURE=$(echo -en "${STRING_TO_SIGN}" | openssl sha1 -hmac "${DIGITAL_OCEAN_SPACES_SECRET}" -binary | base64)

    # Get the list of files in the webimg folder
    RESPONSE=$(curl -s -X GET \
        -H "Date: ${DATE}" \
        -H "Authorization: AWS ${DIGITAL_OCEAN_SPACES_ACCESS}:${SIGNATURE}" \
        "https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com?list-type=2&prefix=${SPACE_PATH}")

    # Read the existing content of image.ts file
    EXISTING_CONTENT=$(<"$IMAGE_TS_PATH")

    # Extract file names and generate URLs using xmllint with namespaces
    NEW_URLS=$(echo "$RESPONSE" | xmllint --xpath "//*[local-name()='Contents']/*[local-name()='Key']/text()" - | while read -r FILE_NAME; do
        URL="https://${SPACE_NAME}.${REGION}.digitaloceanspaces.com/${FILE_NAME}"

        # Check if the URL is already in image.ts
        if ! grep -q "${URL}" <<< "$EXISTING_CONTENT"; then
            KEY=$(echo "$FILE_NAME" | sed -e 's/^webimg\///' -e 's/\.[a-zA-Z0-9]*$//' -e 's/[^a-zA-Z0-9]/_/g')
            printf "  %s: {\n    src: '%s',\n  },\n" "$KEY" "$URL"
        fi
    done)

    # Construct the new content
    NEW_CONTENT=$(echo "$EXISTING_CONTENT" | sed '/};/d')
    NEW_CONTENT+=$'\n'"${NEW_URLS}"$'\n'"};"

    # Write the new content to image.ts
    echo "$NEW_CONTENT" > "$IMAGE_TS_PATH"

    echo "image.ts has been updated."
}
####################################################################################################
# Run functions
####################################################################################################
## Check if the path is a directory
#if [ -d "$PATH_TO_UPLOAD" ]; then
#    for FILE in "$PATH_TO_UPLOAD"/*; do
#        if [ -f "$FILE" ]; then
#            upload_file "$FILE"
#        fi
#    done
#else
#    # If the path is a single file, upload it
#    upload_file "$PATH_TO_UPLOAD"
#fi

# Update the image.ts file
update_image_ts
